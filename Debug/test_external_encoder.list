
test_external_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003718  08003718  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003718  08003718  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003718  08003718  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  0800372c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800372c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b69  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a6  00000000  00000000  00028b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173da  00000000  00000000  0002bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a516  00000000  00000000  00042f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ce6  00000000  00000000  0004d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df0  00000000  00000000  000d1178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036c8 	.word	0x080036c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080036c8 	.word	0x080036c8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b21      	ldr	r3, [pc, #132]	; (80001e4 <MX_ADC1_Init+0x98>)
 800015e:	4a22      	ldr	r2, [pc, #136]	; (80001e8 <MX_ADC1_Init+0x9c>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b1e      	ldr	r3, [pc, #120]	; (80001e4 <MX_ADC1_Init+0x98>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b1c      	ldr	r3, [pc, #112]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000184:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000186:	2202      	movs	r2, #2
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4816      	ldr	r0, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x98>)
 800018c:	f000 fd6a 	bl	8000c64 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fc43 	bl	8000a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800019a:	2302      	movs	r3, #2
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	480e      	ldr	r0, [pc, #56]	; (80001e4 <MX_ADC1_Init+0x98>)
 80001ac:	f000 ff22 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fc33 	bl	8000a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001ba:	2303      	movs	r3, #3
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001c2:	2307      	movs	r3, #7
 80001c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x98>)
 80001cc:	f000 ff12 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fc23 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000028 	.word	0x20000028
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <HAL_ADC_MspInit+0xc0>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d14a      	bne.n	80002a2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800023c:	230c      	movs	r3, #12
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	481a      	ldr	r0, [pc, #104]	; (80002b4 <HAL_ADC_MspInit+0xc8>)
 800024c:	f002 fab0 	bl	80027b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <HAL_ADC_MspInit+0xd0>)
 8000254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800026a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800026e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800027a:	2220      	movs	r2, #32
 800027c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000284:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000288:	f002 f8a4 	bl	80023d4 <HAL_DMA_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000292:	f000 fbc5 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800029a:	621a      	str	r2, [r3, #32]
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002a2:	bf00      	nop
 80002a4:	3720      	adds	r7, #32
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40012400 	.word	0x40012400
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000058 	.word	0x20000058
 80002bc:	40020008 	.word	0x40020008

080002c0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c6:	4b26      	ldr	r3, [pc, #152]	; (8000360 <MX_CAN_Init+0xa0>)
 80002c8:	4a26      	ldr	r2, [pc, #152]	; (8000364 <MX_CAN_Init+0xa4>)
 80002ca:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <MX_CAN_Init+0xa0>)
 80002ce:	2209      	movs	r2, #9
 80002d0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d2:	4b23      	ldr	r3, [pc, #140]	; (8000360 <MX_CAN_Init+0xa0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <MX_CAN_Init+0xa0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <MX_CAN_Init+0xa0>)
 80002e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002e4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_CAN_Init+0xa0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_CAN_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_CAN_Init+0xa0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MX_CAN_Init+0xa0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_CAN_Init+0xa0>)
 8000300:	2200      	movs	r2, #0
 8000302:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_CAN_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_CAN_Init+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_CAN_Init+0xa0>)
 8000312:	f001 f915 	bl	8001540 <HAL_CAN_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 fb80 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000320:	2301      	movs	r3, #1
 8000322:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000324:	230a      	movs	r3, #10
 8000326:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000328:	2301      	movs	r3, #1
 800032a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x111<<5;
 800032c:	f242 2320 	movw	r3, #8736	; 0x2220
 8000330:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 8000336:	f242 2320 	movw	r3, #8736	; 0x2220
 800033a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000344:	2301      	movs	r3, #1
 8000346:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000348:	2300      	movs	r3, #0
 800034a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800034c:	463b      	mov	r3, r7
 800034e:	4619      	mov	r1, r3
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <MX_CAN_Init+0xa0>)
 8000352:	f001 f9f0 	bl	8001736 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	3728      	adds	r7, #40	; 0x28
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000009c 	.word	0x2000009c
 8000364:	40006400 	.word	0x40006400

08000368 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a29      	ldr	r2, [pc, #164]	; (8000428 <HAL_CAN_MspInit+0xc0>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d14b      	bne.n	8000420 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000388:	4b28      	ldr	r3, [pc, #160]	; (800042c <HAL_CAN_MspInit+0xc4>)
 800038a:	69db      	ldr	r3, [r3, #28]
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <HAL_CAN_MspInit+0xc4>)
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	61d3      	str	r3, [r2, #28]
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <HAL_CAN_MspInit+0xc4>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800039c:	613b      	str	r3, [r7, #16]
 800039e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <HAL_CAN_MspInit+0xc4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a21      	ldr	r2, [pc, #132]	; (800042c <HAL_CAN_MspInit+0xc4>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <HAL_CAN_MspInit+0xc4>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <HAL_CAN_MspInit+0xc8>)
 80003ce:	f002 f9ef 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d8:	2302      	movs	r3, #2
 80003da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	4812      	ldr	r0, [pc, #72]	; (8000430 <HAL_CAN_MspInit+0xc8>)
 80003e8:	f002 f9e2 	bl	80027b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <HAL_CAN_MspInit+0xcc>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
 80003f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
 80003fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
 8000402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <HAL_CAN_MspInit+0xcc>)
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2100      	movs	r1, #0
 8000414:	2015      	movs	r0, #21
 8000416:	f001 ffa6 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800041a:	2015      	movs	r0, #21
 800041c:	f001 ffbf 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000420:	bf00      	nop
 8000422:	3728      	adds	r7, #40	; 0x28
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40006400 	.word	0x40006400
 800042c:	40021000 	.word	0x40021000
 8000430:	40010c00 	.word	0x40010c00
 8000434:	40010000 	.word	0x40010000

08000438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_DMA_Init+0x38>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <MX_DMA_Init+0x38>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_DMA_Init+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200b      	movs	r0, #11
 800045c:	f001 ff83 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000460:	200b      	movs	r0, #11
 8000462:	f001 ff9c 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <MX_GPIO_Init+0xf0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a35      	ldr	r2, [pc, #212]	; (8000564 <MX_GPIO_Init+0xf0>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b33      	ldr	r3, [pc, #204]	; (8000564 <MX_GPIO_Init+0xf0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0310 	and.w	r3, r3, #16
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a2f      	ldr	r2, [pc, #188]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a29      	ldr	r2, [pc, #164]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b27      	ldr	r3, [pc, #156]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_GPIO_Init+0xf0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ee:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004f0:	f002 faf9 	bl	8002ae6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4816      	ldr	r0, [pc, #88]	; (8000568 <MX_GPIO_Init+0xf4>)
 800050e:	f002 f94f 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = M1_C1_Pin|M1_C2_Pin|M2_C1_Pin|M2_C2_Pin
 8000512:	f240 33c3 	movw	r3, #963	; 0x3c3
 8000516:	613b      	str	r3, [r7, #16]
                          |M3_C1_Pin|M3_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_GPIO_Init+0xf8>)
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <MX_GPIO_Init+0xfc>)
 8000528:	f002 f942 	bl	80027b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2006      	movs	r0, #6
 8000532:	f001 ff18 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000536:	2006      	movs	r0, #6
 8000538:	f001 ff31 	bl	800239e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2007      	movs	r0, #7
 8000542:	f001 ff10 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000546:	2007      	movs	r0, #7
 8000548:	f001 ff29 	bl	800239e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2017      	movs	r0, #23
 8000552:	f001 ff08 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000556:	2017      	movs	r0, #23
 8000558:	f001 ff21 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	40011000 	.word	0x40011000
 800056c:	10310000 	.word	0x10310000
 8000570:	40010800 	.word	0x40010800

08000574 <HAL_CAN_RxFifo1MsgPendingCallback>:

	return (float)((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8000580:	2101      	movs	r1, #1
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 fabe 	bl	8001b04 <HAL_CAN_GetRxMessage>
	cntt++;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8000592:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8000594:	e007      	b.n	80005a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 800059c:	f002 fabb 	bl	8002b16 <HAL_GPIO_TogglePin>
		cntt = 0;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b64      	cmp	r3, #100	; 0x64
 80005ac:	d8f3      	bhi.n	8000596 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	}
	flag = 1;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000010c 	.word	0x2000010c
 80005c0:	200000f0 	.word	0x200000f0
 80005c4:	200000e7 	.word	0x200000e7
 80005c8:	40011000 	.word	0x40011000
 80005cc:	200000e6 	.word	0x200000e6

080005d0 <encoder>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint16_t encoder(int i)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (nowA[i] != lastA[i])
 80005d8:	4a6e      	ldr	r2, [pc, #440]	; (8000794 <encoder+0x1c4>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	496d      	ldr	r1, [pc, #436]	; (8000798 <encoder+0x1c8>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	440b      	add	r3, r1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d05d      	beq.n	80006ac <encoder+0xdc>
	{
		lastA[i] = nowA[i];
 80005f0:	4a68      	ldr	r2, [pc, #416]	; (8000794 <encoder+0x1c4>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	4a67      	ldr	r2, [pc, #412]	; (8000798 <encoder+0x1c8>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	460a      	mov	r2, r1
 8000602:	701a      	strb	r2, [r3, #0]
		if (lastA[i] == 0)
 8000604:	4a64      	ldr	r2, [pc, #400]	; (8000798 <encoder+0x1c8>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d126      	bne.n	8000660 <encoder+0x90>
		{
			if (nowB[i] == 0)
 8000612:	4a62      	ldr	r2, [pc, #392]	; (800079c <encoder+0x1cc>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10f      	bne.n	8000640 <encoder+0x70>
			{
				dir[i] = 0;
 8000620:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <encoder+0x1d0>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 800062a:	4a5e      	ldr	r2, [pc, #376]	; (80007a4 <encoder+0x1d4>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	3b01      	subs	r3, #1
 8000634:	b299      	uxth	r1, r3
 8000636:	4a5b      	ldr	r2, [pc, #364]	; (80007a4 <encoder+0x1d4>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800063e:	e035      	b.n	80006ac <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 8000640:	4a57      	ldr	r2, [pc, #348]	; (80007a0 <encoder+0x1d0>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 800064a:	4a56      	ldr	r2, [pc, #344]	; (80007a4 <encoder+0x1d4>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000652:	3301      	adds	r3, #1
 8000654:	b299      	uxth	r1, r3
 8000656:	4a53      	ldr	r2, [pc, #332]	; (80007a4 <encoder+0x1d4>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800065e:	e025      	b.n	80006ac <encoder+0xdc>
			}
		}
		else
		{
			if (nowB[i] == 1)
 8000660:	4a4e      	ldr	r2, [pc, #312]	; (800079c <encoder+0x1cc>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10f      	bne.n	800068e <encoder+0xbe>
			{
				dir[i] = 0;
 800066e:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <encoder+0x1d0>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8000678:	4a4a      	ldr	r2, [pc, #296]	; (80007a4 <encoder+0x1d4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	3b01      	subs	r3, #1
 8000682:	b299      	uxth	r1, r3
 8000684:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <encoder+0x1d4>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800068c:	e00e      	b.n	80006ac <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 800068e:	4a44      	ldr	r2, [pc, #272]	; (80007a0 <encoder+0x1d0>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8000698:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <encoder+0x1d4>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b299      	uxth	r1, r3
 80006a4:	4a3f      	ldr	r2, [pc, #252]	; (80007a4 <encoder+0x1d4>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	if (nowB[i] != lastB[i])
 80006ac:	4a3b      	ldr	r2, [pc, #236]	; (800079c <encoder+0x1cc>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	493c      	ldr	r1, [pc, #240]	; (80007a8 <encoder+0x1d8>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	440b      	add	r3, r1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d05d      	beq.n	8000780 <encoder+0x1b0>
	{
		lastB[i] = nowB[i];
 80006c4:	4a35      	ldr	r2, [pc, #212]	; (800079c <encoder+0x1cc>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2d9      	uxtb	r1, r3
 80006ce:	4a36      	ldr	r2, [pc, #216]	; (80007a8 <encoder+0x1d8>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	460a      	mov	r2, r1
 80006d6:	701a      	strb	r2, [r3, #0]
		if (lastB[i] == 0)
 80006d8:	4a33      	ldr	r2, [pc, #204]	; (80007a8 <encoder+0x1d8>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d126      	bne.n	8000734 <encoder+0x164>
		{
			if (nowA[i] == 1)
 80006e6:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <encoder+0x1c4>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d10f      	bne.n	8000714 <encoder+0x144>
			{
				dir[i] = 0;
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <encoder+0x1d0>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <encoder+0x1d4>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	3b01      	subs	r3, #1
 8000708:	b299      	uxth	r1, r3
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <encoder+0x1d4>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000712:	e035      	b.n	8000780 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <encoder+0x1d0>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <encoder+0x1d4>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	3301      	adds	r3, #1
 8000728:	b299      	uxth	r1, r3
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <encoder+0x1d4>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000732:	e025      	b.n	8000780 <encoder+0x1b0>
			}
		}
		else
		{
			if (nowA[i] == 0)
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <encoder+0x1c4>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10f      	bne.n	8000762 <encoder+0x192>
			{
				dir[i] = 0;
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <encoder+0x1d0>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 800074c:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <encoder+0x1d4>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000754:	3b01      	subs	r3, #1
 8000756:	b299      	uxth	r1, r3
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <encoder+0x1d4>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000760:	e00e      	b.n	8000780 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <encoder+0x1d0>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <encoder+0x1d4>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000774:	3301      	adds	r3, #1
 8000776:	b299      	uxth	r1, r3
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <encoder+0x1d4>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	return cnt[i];
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <encoder+0x1d4>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000c4 	.word	0x200000c4
 8000798:	200000cc 	.word	0x200000cc
 800079c:	200000c8 	.word	0x200000c8
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	200000d0 	.word	0x200000d0

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 f9f6 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f878 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f7ff fe5c 	bl	8000474 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f7ff fe3c 	bl	8000438 <MX_DMA_Init>
  MX_CAN_Init();
 80007c0:	f7ff fd7e 	bl	80002c0 <MX_CAN_Init>
  MX_ADC1_Init();
 80007c4:	f7ff fcc2 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80007c8:	482e      	ldr	r0, [pc, #184]	; (8000884 <main+0xd8>)
 80007ca:	f001 f87d 	bl	80018c8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80007ce:	2110      	movs	r1, #16
 80007d0:	482c      	ldr	r0, [pc, #176]	; (8000884 <main+0xd8>)
 80007d2:	f001 faa8 	bl	8001d26 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 8; // data length
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <main+0xdc>)
 80007d8:	2208      	movs	r2, #8
 80007da:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <main+0xdc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <main+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x333; // ID
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <main+0xdc>)
 80007ea:	f240 3233 	movw	r2, #819	; 0x333
 80007ee:	601a      	str	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1);
 80007f0:	4826      	ldr	r0, [pc, #152]	; (800088c <main+0xe0>)
 80007f2:	f000 fdf9 	bl	80013e8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 80007f6:	2202      	movs	r2, #2
 80007f8:	4925      	ldr	r1, [pc, #148]	; (8000890 <main+0xe4>)
 80007fa:	4824      	ldr	r0, [pc, #144]	; (800088c <main+0xe0>)
 80007fc:	f000 fb0a 	bl	8000e14 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	pub_adc = AD_RES[0];
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <main+0xe4>)
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <main+0xe8>)
 8000806:	801a      	strh	r2, [r3, #0]

		TxData[0] = ((Enc_count[0] & 0xFF00) >> 8);
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0xec>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	b29b      	uxth	r3, r3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <main+0xf0>)
 8000814:	701a      	strb	r2, [r3, #0]
		TxData[1] = (Enc_count[0] & 0x00FF);
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <main+0xec>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <main+0xf0>)
 800081e:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((Enc_count[1] & 0xFF00) >> 8);
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <main+0xec>)
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <main+0xf0>)
 800082c:	709a      	strb	r2, [r3, #2]
		TxData[3] = (Enc_count[1] & 0x00FF);
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <main+0xec>)
 8000830:	885b      	ldrh	r3, [r3, #2]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <main+0xf0>)
 8000836:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((Enc_count[2] & 0xFF00) >> 8);
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <main+0xec>)
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <main+0xf0>)
 8000844:	711a      	strb	r2, [r3, #4]
		TxData[5] = (Enc_count[2] & 0x00FF);
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <main+0xec>)
 8000848:	889b      	ldrh	r3, [r3, #4]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <main+0xf0>)
 800084e:	715a      	strb	r2, [r3, #5]
		TxData[6] = ((pub_adc & 0xFF00) >> 8);
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <main+0xe8>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <main+0xf0>)
 800085c:	719a      	strb	r2, [r3, #6]
		TxData[7] = (pub_adc & 0x00FF);
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <main+0xe8>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <main+0xf0>)
 8000866:	71da      	strb	r2, [r3, #7]

		if(flag == 1){
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0xf4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d1c7      	bne.n	8000800 <main+0x54>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0xf8>)
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <main+0xf0>)
 8000874:	4904      	ldr	r1, [pc, #16]	; (8000888 <main+0xdc>)
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <main+0xd8>)
 8000878:	f001 f86a 	bl	8001950 <HAL_CAN_AddTxMessage>
			flag = 0;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <main+0xf4>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	  	pub_adc = AD_RES[0];
 8000882:	e7bd      	b.n	8000800 <main+0x54>
 8000884:	2000009c 	.word	0x2000009c
 8000888:	20000114 	.word	0x20000114
 800088c:	20000028 	.word	0x20000028
 8000890:	200000e8 	.word	0x200000e8
 8000894:	200000ec 	.word	0x200000ec
 8000898:	200000e0 	.word	0x200000e0
 800089c:	2000012c 	.word	0x2000012c
 80008a0:	200000e6 	.word	0x200000e6
 80008a4:	20000134 	.word	0x20000134

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	2228      	movs	r2, #40	; 0x28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fefe 	bl	80036b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 f93a 	bl	8002b78 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800090a:	f000 f889 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fba6 	bl	800307c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000936:	f000 f873 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800093e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000942:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fd1c 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000952:	f000 f865 	bl	8000a20 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result

}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == M1_C1_Pin || M1_C2_Pin)
	{ // ENCODER Motor 1
		nowA[0] = HAL_GPIO_ReadPin(M1_C1_GPIO_Port, M1_C1_Pin);
 800097a:	2101      	movs	r1, #1
 800097c:	4824      	ldr	r0, [pc, #144]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 800097e:	f002 f89b 	bl	8002ab8 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000988:	701a      	strb	r2, [r3, #0]
		nowB[0] = HAL_GPIO_ReadPin(M1_C2_GPIO_Port, M1_C2_Pin);
 800098a:	2102      	movs	r1, #2
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 800098e:	f002 f893 	bl	8002ab8 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000998:	701a      	strb	r2, [r3, #0]
		Enc_count[0] = encoder(0);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe18 	bl	80005d0 <encoder>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_GPIO_EXTI_Callback+0xac>)
 80009a6:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == M2_C1_Pin || M2_C2_Pin)
	{ // ENCODER Motor 1
		nowA[1] = HAL_GPIO_ReadPin(M2_C1_GPIO_Port, M2_C1_Pin);
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4819      	ldr	r0, [pc, #100]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009ac:	f002 f884 	bl	8002ab8 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009b6:	705a      	strb	r2, [r3, #1]
		nowB[1] = HAL_GPIO_ReadPin(M2_C2_GPIO_Port, M2_C2_Pin);
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	4815      	ldr	r0, [pc, #84]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009bc:	f002 f87c 	bl	8002ab8 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009c6:	705a      	strb	r2, [r3, #1]
		Enc_count[1] = encoder(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fe01 	bl	80005d0 <encoder>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_GPIO_EXTI_Callback+0xac>)
 80009d4:	805a      	strh	r2, [r3, #2]
	}
	if (GPIO_Pin == M3_C1_Pin || M3_C2_Pin)
	{ // ENCODER Motor 1
		nowA[2] = HAL_GPIO_ReadPin(M3_C1_GPIO_Port, M3_C1_Pin);
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009dc:	f002 f86c 	bl	8002ab8 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009e6:	709a      	strb	r2, [r3, #2]
		nowB[2] = HAL_GPIO_ReadPin(M3_C2_GPIO_Port, M3_C2_Pin);
 80009e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009ee:	f002 f863 	bl	8002ab8 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009f8:	709a      	strb	r2, [r3, #2]
		Enc_count[2] = encoder(2);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff fde8 	bl	80005d0 <encoder>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_GPIO_EXTI_Callback+0xac>)
 8000a06:	809a      	strh	r2, [r3, #4]
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010800 	.word	0x40010800
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	200000c8 	.word	0x200000c8
 8000a1c:	200000e0 	.word	0x200000e0

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x60>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_MspInit+0x60>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f000 f8a9 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}

08000ade <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_C1_Pin);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f002 f830 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_C2_Pin);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f002 f829 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Channel1_IRQHandler+0x10>)
 8000b02:	f001 fd21 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000058 	.word	0x20000058

08000b10 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <CAN1_RX1_IRQHandler+0x10>)
 8000b16:	f001 f92b 	bl	8001d70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000009c 	.word	0x2000009c

08000b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_C1_Pin);
 8000b28:	2040      	movs	r0, #64	; 0x40
 8000b2a:	f002 f80d 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_C2_Pin);
 8000b2e:	2080      	movs	r0, #128	; 0x80
 8000b30:	f002 f80a 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M3_C1_Pin);
 8000b34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b38:	f002 f806 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M3_C2_Pin);
 8000b3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b40:	f002 f802 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7a:	f7ff ffe5 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 fd77 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff fe13 	bl	80007ac <main>
  bx lr
 8000b86:	4770      	bx	lr
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b90:	08003720 	.word	0x08003720
  ldr r2, =_sbss
 8000b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b98:	2000013c 	.word	0x2000013c

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x28>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x28>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f001 fbcd 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff ff36 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fbe5 	bl	80023ba <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f001 fbad 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000138 	.word	0x20000138

08000c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	20000138 	.word	0x20000138

08000c64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e0be      	b.n	8000e04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d109      	bne.n	8000ca8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff faa2 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 faf5 	bl	8001298 <ADC_ConversionStop_Disable>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 8099 	bne.w	8000df2 <HAL_ADC_Init+0x18e>
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8095 	bne.w	8000df2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cd0:	f023 0302 	bic.w	r3, r3, #2
 8000cd4:	f043 0202 	orr.w	r2, r3, #2
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7b1b      	ldrb	r3, [r3, #12]
 8000cea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cfc:	d003      	beq.n	8000d06 <HAL_ADC_Init+0xa2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d102      	bne.n	8000d0c <HAL_ADC_Init+0xa8>
 8000d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0a:	e000      	b.n	8000d0e <HAL_ADC_Init+0xaa>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7d1b      	ldrb	r3, [r3, #20]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d119      	bne.n	8000d50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7b1b      	ldrb	r3, [r3, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	035a      	lsls	r2, r3, #13
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e00b      	b.n	8000d50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f043 0220 	orr.w	r2, r3, #32
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	f043 0201 	orr.w	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_ADC_Init+0x1a8>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6812      	ldr	r2, [r2, #0]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d80:	d003      	beq.n	8000d8a <HAL_ADC_Init+0x126>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d104      	bne.n	8000d94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	051b      	lsls	r3, r3, #20
 8000d92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_ADC_Init+0x1ac>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d10b      	bne.n	8000dd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	f043 0201 	orr.w	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dce:	e018      	b.n	8000e02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f023 0312 	bic.w	r3, r3, #18
 8000dd8:	f043 0210 	orr.w	r2, r3, #16
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df0:	e007      	b.n	8000e02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	f043 0210 	orr.w	r2, r3, #16
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e10:	ff1f0efe 	.word	0xff1f0efe

08000e14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a64      	ldr	r2, [pc, #400]	; (8000fbc <HAL_ADC_Start_DMA+0x1a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d004      	beq.n	8000e38 <HAL_ADC_Start_DMA+0x24>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a63      	ldr	r2, [pc, #396]	; (8000fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d106      	bne.n	8000e46 <HAL_ADC_Start_DMA+0x32>
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <HAL_ADC_Start_DMA+0x1a8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f040 80b3 	bne.w	8000fac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Start_DMA+0x40>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e0ae      	b.n	8000fb2 <HAL_ADC_Start_DMA+0x19e>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 f9c1 	bl	80011e4 <ADC_Enable>
 8000e62:	4603      	mov	r3, r0
 8000e64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f040 809a 	bne.w	8000fa2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d105      	bne.n	8000e98 <HAL_ADC_Start_DMA+0x84>
 8000e8c:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <HAL_ADC_Start_DMA+0x1a8>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d115      	bne.n	8000ec4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d026      	beq.n	8000f00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ec2:	e01d      	b.n	8000f00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a39      	ldr	r2, [pc, #228]	; (8000fbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d004      	beq.n	8000ee4 <HAL_ADC_Start_DMA+0xd0>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10d      	bne.n	8000f00 <HAL_ADC_Start_DMA+0xec>
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f023 0206 	bic.w	r2, r3, #6
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <HAL_ADC_Start_DMA+0x1b0>)
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_ADC_Start_DMA+0x1b4>)
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <HAL_ADC_Start_DMA+0x1b8>)
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f06f 0202 	mvn.w	r2, #2
 8000f48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a18      	ldr	r0, [r3, #32]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	334c      	adds	r3, #76	; 0x4c
 8000f64:	4619      	mov	r1, r3
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f001 fa8d 	bl	8002488 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f7c:	d108      	bne.n	8000f90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f8e:	e00f      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fa0:	e006      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000faa:	e001      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40012400 	.word	0x40012400
 8000fc0:	40012800 	.word	0x40012800
 8000fc4:	0800131b 	.word	0x0800131b
 8000fc8:	08001397 	.word	0x08001397
 8000fcc:	080013b3 	.word	0x080013b3

08000fd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x20>
 8001010:	2302      	movs	r3, #2
 8001012:	e0dc      	b.n	80011ce <HAL_ADC_ConfigChannel+0x1da>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b06      	cmp	r3, #6
 8001022:	d81c      	bhi.n	800105e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b05      	subs	r3, #5
 8001036:	221f      	movs	r2, #31
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	4019      	ands	r1, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b05      	subs	r3, #5
 8001050:	fa00 f203 	lsl.w	r2, r0, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
 800105c:	e03c      	b.n	80010d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d81c      	bhi.n	80010a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	3b23      	subs	r3, #35	; 0x23
 8001078:	221f      	movs	r2, #31
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	4019      	ands	r1, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b23      	subs	r3, #35	; 0x23
 8001092:	fa00 f203 	lsl.w	r2, r0, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
 800109e:	e01b      	b.n	80010d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b41      	subs	r3, #65	; 0x41
 80010b2:	221f      	movs	r2, #31
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4019      	ands	r1, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b41      	subs	r3, #65	; 0x41
 80010cc:	fa00 f203 	lsl.w	r2, r0, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d91c      	bls.n	800111a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68d9      	ldr	r1, [r3, #12]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	3b1e      	subs	r3, #30
 80010f2:	2207      	movs	r2, #7
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4019      	ands	r1, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6898      	ldr	r0, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	3b1e      	subs	r3, #30
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	e019      	b.n	800114e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6919      	ldr	r1, [r3, #16]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	2207      	movs	r2, #7
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4019      	ands	r1, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6898      	ldr	r0, [r3, #8]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	fa00 f203 	lsl.w	r2, r0, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b10      	cmp	r3, #16
 8001154:	d003      	beq.n	800115e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800115a:	2b11      	cmp	r3, #17
 800115c:	d132      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d125      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d126      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001184:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b10      	cmp	r3, #16
 800118c:	d11a      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9a      	lsrs	r2, r3, #18
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a4:	e002      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x1b2>
 80011b2:	e007      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f043 0220 	orr.w	r2, r3, #32
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40012400 	.word	0x40012400
 80011dc:	20000000 	.word	0x20000000
 80011e0:	431bde83 	.word	0x431bde83

080011e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d040      	beq.n	8001284 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <ADC_Enable+0xac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <ADC_Enable+0xb0>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	0c9b      	lsrs	r3, r3, #18
 800121e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001220:	e002      	b.n	8001228 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3b01      	subs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800122e:	f7ff fd0f 	bl	8000c50 <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001234:	e01f      	b.n	8001276 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001236:	f7ff fd0b 	bl	8000c50 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d918      	bls.n	8001276 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d011      	beq.n	8001276 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	f043 0210 	orr.w	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e007      	b.n	8001286 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	d1d8      	bne.n	8001236 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12e      	bne.n	8001310 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012c2:	f7ff fcc5 	bl	8000c50 <HAL_GetTick>
 80012c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012c8:	e01b      	b.n	8001302 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ca:	f7ff fcc1 	bl	8000c50 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d914      	bls.n	8001302 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10d      	bne.n	8001302 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f043 0210 	orr.w	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e007      	b.n	8001312 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d0dc      	beq.n	80012ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001330:	2b00      	cmp	r3, #0
 8001332:	d127      	bne.n	8001384 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800134a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800134e:	d115      	bne.n	800137c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff faee 	bl	800095e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001382:	e004      	b.n	800138e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fe13 	bl	8000fd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	f043 0204 	orr.w	r2, r3, #4
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fe02 	bl	8000fe2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADCEx_Calibration_Start+0x1e>
 8001402:	2302      	movs	r3, #2
 8001404:	e095      	b.n	8001532 <HAL_ADCEx_Calibration_Start+0x14a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff42 	bl	8001298 <ADC_ConversionStop_Disable>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 8084 	bne.w	8001528 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	f043 0202 	orr.w	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_ADCEx_Calibration_Start+0x154>)
 8001436:	681c      	ldr	r4, [r3, #0]
 8001438:	2002      	movs	r0, #2
 800143a:	f002 f859 	bl	80034f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800143e:	4603      	mov	r3, r0
 8001440:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001444:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001446:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001448:	e002      	b.n	8001450 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3b01      	subs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fec4 	bl	80011e4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800146c:	f7ff fbf0 	bl	8000c50 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001472:	e01b      	b.n	80014ac <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001474:	f7ff fbec 	bl	8000c50 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d914      	bls.n	80014ac <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00d      	beq.n	80014ac <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f023 0312 	bic.w	r3, r3, #18
 8001498:	f043 0210 	orr.w	r2, r3, #16
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e042      	b.n	8001532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1dc      	bne.n	8001474 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0204 	orr.w	r2, r2, #4
 80014c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014ca:	f7ff fbc1 	bl	8000c50 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014d0:	e01b      	b.n	800150a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014d2:	f7ff fbbd 	bl	8000c50 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b0a      	cmp	r3, #10
 80014de:	d914      	bls.n	800150a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00d      	beq.n	800150a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f023 0312 	bic.w	r3, r3, #18
 80014f6:	f043 0210 	orr.w	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e013      	b.n	8001532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1dc      	bne.n	80014d2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000

08001540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0ed      	b.n	800172e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe ff02 	bl	8000368 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff fb6c 	bl	8000c50 <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800157a:	e012      	b.n	80015a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800157c:	f7ff fb68 	bl	8000c50 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d90b      	bls.n	80015a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0c5      	b.n	800172e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0e5      	beq.n	800157c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0202 	bic.w	r2, r2, #2
 80015be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff fb46 	bl	8000c50 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c6:	e012      	b.n	80015ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c8:	f7ff fb42 	bl	8000c50 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d90b      	bls.n	80015ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2205      	movs	r2, #5
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e09f      	b.n	800172e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e5      	bne.n	80015c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7e5b      	ldrb	r3, [r3, #25]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e9b      	ldrb	r3, [r3, #26]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0220 	bic.w	r2, r2, #32
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7edb      	ldrb	r3, [r3, #27]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0210 	bic.w	r2, r2, #16
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0208 	orr.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7f5b      	ldrb	r3, [r3, #29]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0204 	orr.w	r2, r2, #4
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0204 	bic.w	r2, r2, #4
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	ea42 0103 	orr.w	r1, r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001736:	b480      	push	{r7}
 8001738:	b087      	sub	sp, #28
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <HAL_CAN_ConfigFilter+0x26>
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	2b02      	cmp	r3, #2
 8001758:	f040 80aa 	bne.w	80018b0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2201      	movs	r2, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d123      	bne.n	80017de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3248      	adds	r2, #72	; 0x48
 80017be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017d4:	6979      	ldr	r1, [r7, #20]
 80017d6:	3348      	adds	r3, #72	; 0x48
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d122      	bne.n	800182c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001806:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3248      	adds	r2, #72	; 0x48
 800180c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001820:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	3348      	adds	r3, #72	; 0x48
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001846:	e007      	b.n	8001858 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001872:	e007      	b.n	8001884 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018a2:	f023 0201 	bic.w	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e006      	b.n	80018be <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d12e      	bne.n	800193a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f9ac 	bl	8000c50 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018fa:	e012      	b.n	8001922 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018fc:	f7ff f9a8 	bl	8000c50 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b0a      	cmp	r3, #10
 8001908:	d90b      	bls.n	8001922 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2205      	movs	r2, #5
 800191a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e012      	b.n	8001948 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e5      	bne.n	80018fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e006      	b.n	8001948 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001964:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d003      	beq.n	800197c <HAL_CAN_AddTxMessage+0x2c>
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b02      	cmp	r3, #2
 8001978:	f040 80b8 	bne.w	8001aec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80a0 	beq.w	8001adc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	0e1b      	lsrs	r3, r3, #24
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d907      	bls.n	80019bc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e09e      	b.n	8001afa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019bc:	2201      	movs	r2, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	409a      	lsls	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	6809      	ldr	r1, [r1, #0]
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3318      	adds	r3, #24
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	440b      	add	r3, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e00f      	b.n	8001a0a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019fa:	68f9      	ldr	r1, [r7, #12]
 80019fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	440b      	add	r3, r1
 8001a08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3318      	adds	r3, #24
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	440b      	add	r3, r1
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	7d1b      	ldrb	r3, [r3, #20]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d111      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	3304      	adds	r3, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	6811      	ldr	r1, [r2, #0]
 8001a3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3318      	adds	r3, #24
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	440b      	add	r3, r1
 8001a46:	3304      	adds	r3, #4
 8001a48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	061a      	lsls	r2, r3, #24
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3306      	adds	r3, #6
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3305      	adds	r3, #5
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	4313      	orrs	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	3204      	adds	r2, #4
 8001a6a:	7812      	ldrb	r2, [r2, #0]
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6811      	ldr	r1, [r2, #0]
 8001a72:	ea43 0200 	orr.w	r2, r3, r0
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3303      	adds	r3, #3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	061a      	lsls	r2, r3, #24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	6811      	ldr	r1, [r2, #0]
 8001aa8:	ea43 0200 	orr.w	r2, r3, r0
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ab6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	440b      	add	r3, r1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e00e      	b.n	8001afa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e006      	b.n	8001afa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d003      	beq.n	8001b28 <HAL_CAN_GetRxMessage+0x24>
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	f040 80f3 	bne.w	8001d0e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10e      	bne.n	8001b4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d116      	bne.n	8001b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0e7      	b.n	8001d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0d8      	b.n	8001d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0204 	and.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	331b      	adds	r3, #27
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0d5b      	lsrs	r3, r3, #21
 8001b98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e00b      	b.n	8001bba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	331b      	adds	r3, #27
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	331b      	adds	r3, #27
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0202 	and.w	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	331b      	adds	r3, #27
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 020f 	and.w	r2, r3, #15
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	331b      	adds	r3, #27
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	331b      	adds	r3, #27
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0a1a      	lsrs	r2, r3, #8
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1a      	lsrs	r2, r3, #16
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e1a      	lsrs	r2, r3, #24
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3303      	adds	r3, #3
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0a1a      	lsrs	r2, r3, #8
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3305      	adds	r3, #5
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0c1a      	lsrs	r2, r3, #16
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3306      	adds	r3, #6
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e1a      	lsrs	r2, r3, #24
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3307      	adds	r3, #7
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e006      	b.n	8001d1c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d002      	beq.n	8001d44 <HAL_CAN_ActivateNotification+0x1e>
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d109      	bne.n	8001d58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6959      	ldr	r1, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d07c      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d023      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f983 	bl	80020de <HAL_CAN_TxMailbox0CompleteCallback>
 8001dd8:	e016      	b.n	8001e08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	e00c      	b.n	8001e08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	e002      	b.n	8001e08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f986 	bl	8002114 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f962 	bl	80020f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e2c:	e016      	b.n	8001e5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e00c      	b.n	8001e5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	e002      	b.n	8001e5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f965 	bl	8002126 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d024      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f941 	bl	8002102 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e80:	e016      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	e00c      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	e002      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f944 	bl	8002138 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f933 	bl	800215c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f91b 	bl	800214a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f90a 	bl	800216e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fafe 	bl	8000574 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8f3 	bl	8002180 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8eb 	bl	8002192 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d07b      	beq.n	80020be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d072      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202a:	2b00      	cmp	r3, #0
 800202c:	d043      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	d03e      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203e:	2b60      	cmp	r3, #96	; 0x60
 8002040:	d02b      	beq.n	800209a <HAL_CAN_IRQHandler+0x32a>
 8002042:	2b60      	cmp	r3, #96	; 0x60
 8002044:	d82e      	bhi.n	80020a4 <HAL_CAN_IRQHandler+0x334>
 8002046:	2b50      	cmp	r3, #80	; 0x50
 8002048:	d022      	beq.n	8002090 <HAL_CAN_IRQHandler+0x320>
 800204a:	2b50      	cmp	r3, #80	; 0x50
 800204c:	d82a      	bhi.n	80020a4 <HAL_CAN_IRQHandler+0x334>
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d019      	beq.n	8002086 <HAL_CAN_IRQHandler+0x316>
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d826      	bhi.n	80020a4 <HAL_CAN_IRQHandler+0x334>
 8002056:	2b30      	cmp	r3, #48	; 0x30
 8002058:	d010      	beq.n	800207c <HAL_CAN_IRQHandler+0x30c>
 800205a:	2b30      	cmp	r3, #48	; 0x30
 800205c:	d822      	bhi.n	80020a4 <HAL_CAN_IRQHandler+0x334>
 800205e:	2b10      	cmp	r3, #16
 8002060:	d002      	beq.n	8002068 <HAL_CAN_IRQHandler+0x2f8>
 8002062:	2b20      	cmp	r3, #32
 8002064:	d005      	beq.n	8002072 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002066:	e01d      	b.n	80020a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002070:	e019      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800207a:	e014      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002084:	e00f      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208e:	e00a      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002098:	e005      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020a2:	e000      	b.n	80020a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80020a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699a      	ldr	r2, [r3, #24]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2204      	movs	r2, #4
 80020bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f867 	bl	80021a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4906      	ldr	r1, [pc, #24]	; (8002250 <__NVIC_EnableIRQ+0x34>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002330:	f7ff ff90 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff2d 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff42 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff90 	bl	80022a8 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5f 	bl	8002254 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff35 	bl	800221c <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e043      	b.n	8002472 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_DMA_Init+0xa8>)
 80023f2:	4413      	add	r3, r2
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_DMA_Init+0xac>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_DMA_Init+0xb0>)
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800241e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	bffdfff8 	.word	0xbffdfff8
 8002480:	cccccccd 	.word	0xcccccccd
 8002484:	40020000 	.word	0x40020000

08002488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Start_IT+0x20>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e04a      	b.n	800253e <HAL_DMA_Start_IT+0xb6>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d13a      	bne.n	8002530 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f938 	bl	8002754 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 020e 	orr.w	r2, r2, #14
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e00f      	b.n	800251e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0204 	bic.w	r2, r2, #4
 800250c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 020a 	orr.w	r2, r2, #10
 800251c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e005      	b.n	800253c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002538:	2302      	movs	r3, #2
 800253a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2204      	movs	r2, #4
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d04f      	beq.n	8002610 <HAL_DMA_IRQHandler+0xc8>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_DMA_IRQHandler+0x1f0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d029      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xae>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_DMA_IRQHandler+0x1f4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xaa>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_DMA_IRQHandler+0x1f8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01a      	beq.n	80025ec <HAL_DMA_IRQHandler+0xa4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a62      	ldr	r2, [pc, #392]	; (8002744 <HAL_DMA_IRQHandler+0x1fc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d012      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x9e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a60      	ldr	r2, [pc, #384]	; (8002748 <HAL_DMA_IRQHandler+0x200>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00a      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x98>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5f      	ldr	r2, [pc, #380]	; (800274c <HAL_DMA_IRQHandler+0x204>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d102      	bne.n	80025da <HAL_DMA_IRQHandler+0x92>
 80025d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025d8:	e00e      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025de:	e00b      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025e4:	e008      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ea:	e005      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f0:	e002      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	e000      	b.n	80025f8 <HAL_DMA_IRQHandler+0xb0>
 80025f6:	2304      	movs	r3, #4
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_DMA_IRQHandler+0x208>)
 80025fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8094 	beq.w	800272e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800260e:	e08e      	b.n	800272e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	2202      	movs	r2, #2
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d056      	beq.n	80026ce <HAL_DMA_IRQHandler+0x186>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d051      	beq.n	80026ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020a 	bic.w	r2, r2, #10
 8002646:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_DMA_IRQHandler+0x1f0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d029      	beq.n	80026ae <HAL_DMA_IRQHandler+0x166>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_DMA_IRQHandler+0x1f4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_DMA_IRQHandler+0x162>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a35      	ldr	r2, [pc, #212]	; (8002740 <HAL_DMA_IRQHandler+0x1f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01a      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x15c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_DMA_IRQHandler+0x1fc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d012      	beq.n	800269e <HAL_DMA_IRQHandler+0x156>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a32      	ldr	r2, [pc, #200]	; (8002748 <HAL_DMA_IRQHandler+0x200>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00a      	beq.n	8002698 <HAL_DMA_IRQHandler+0x150>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_DMA_IRQHandler+0x204>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_DMA_IRQHandler+0x14a>
 800268c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002690:	e00e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 8002692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002696:	e00b      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 8002698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269c:	e008      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	e005      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 80026a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a8:	e002      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 80026aa:	2320      	movs	r3, #32
 80026ac:	e000      	b.n	80026b0 <HAL_DMA_IRQHandler+0x168>
 80026ae:	2302      	movs	r3, #2
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_DMA_IRQHandler+0x208>)
 80026b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d034      	beq.n	800272e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026cc:	e02f      	b.n	800272e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2208      	movs	r2, #8
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d028      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e8>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 020e 	bic.w	r2, r2, #14
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
    }
  }
  return;
 800272e:	bf00      	nop
 8002730:	bf00      	nop
}
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40020008 	.word	0x40020008
 800273c:	4002001c 	.word	0x4002001c
 8002740:	40020030 	.word	0x40020030
 8002744:	40020044 	.word	0x40020044
 8002748:	40020058 	.word	0x40020058
 800274c:	4002006c 	.word	0x4002006c
 8002750:	40020000 	.word	0x40020000

08002754 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b10      	cmp	r3, #16
 8002780:	d108      	bne.n	8002794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002792:	e007      	b.n	80027a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e169      	b.n	8002a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c4:	2201      	movs	r2, #1
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8158 	bne.w	8002a92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a9a      	ldr	r2, [pc, #616]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d05e      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027ec:	4a98      	ldr	r2, [pc, #608]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d875      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027f2:	4a98      	ldr	r2, [pc, #608]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d058      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027f8:	4a96      	ldr	r2, [pc, #600]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d86f      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027fe:	4a96      	ldr	r2, [pc, #600]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d052      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002804:	4a94      	ldr	r2, [pc, #592]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d869      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800280a:	4a94      	ldr	r2, [pc, #592]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04c      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002810:	4a92      	ldr	r2, [pc, #584]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d863      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002816:	4a92      	ldr	r2, [pc, #584]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d046      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 800281c:	4a90      	ldr	r2, [pc, #576]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d85d      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d82a      	bhi.n	800287c <HAL_GPIO_Init+0xcc>
 8002826:	2b12      	cmp	r3, #18
 8002828:	d859      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_GPIO_Init+0x80>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028ab 	.word	0x080028ab
 8002834:	08002885 	.word	0x08002885
 8002838:	08002897 	.word	0x08002897
 800283c:	080028d9 	.word	0x080028d9
 8002840:	080028df 	.word	0x080028df
 8002844:	080028df 	.word	0x080028df
 8002848:	080028df 	.word	0x080028df
 800284c:	080028df 	.word	0x080028df
 8002850:	080028df 	.word	0x080028df
 8002854:	080028df 	.word	0x080028df
 8002858:	080028df 	.word	0x080028df
 800285c:	080028df 	.word	0x080028df
 8002860:	080028df 	.word	0x080028df
 8002864:	080028df 	.word	0x080028df
 8002868:	080028df 	.word	0x080028df
 800286c:	080028df 	.word	0x080028df
 8002870:	080028df 	.word	0x080028df
 8002874:	0800288d 	.word	0x0800288d
 8002878:	080028a1 	.word	0x080028a1
 800287c:	4a79      	ldr	r2, [pc, #484]	; (8002a64 <HAL_GPIO_Init+0x2b4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002882:	e02c      	b.n	80028de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e029      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e024      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	3308      	adds	r3, #8
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e01f      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	330c      	adds	r3, #12
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e01a      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028b2:	2304      	movs	r3, #4
 80028b4:	623b      	str	r3, [r7, #32]
          break;
 80028b6:	e013      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c0:	2308      	movs	r3, #8
 80028c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	611a      	str	r2, [r3, #16]
          break;
 80028ca:	e009      	b.n	80028e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	615a      	str	r2, [r3, #20]
          break;
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          break;
 80028de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d801      	bhi.n	80028ea <HAL_GPIO_Init+0x13a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <HAL_GPIO_Init+0x13e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d802      	bhi.n	80028fc <HAL_GPIO_Init+0x14c>
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x152>
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3b08      	subs	r3, #8
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	210f      	movs	r1, #15
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80b1 	beq.w	8002a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a4c      	ldr	r2, [pc, #304]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <HAL_GPIO_Init+0x2c0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_GPIO_Init+0x1ec>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <HAL_GPIO_Init+0x2c4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00d      	beq.n	8002998 <HAL_GPIO_Init+0x1e8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_GPIO_Init+0x1e4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <HAL_GPIO_Init+0x2cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_GPIO_Init+0x1e0>
 800298c:	2303      	movs	r3, #3
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002990:	2304      	movs	r3, #4
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002994:	2302      	movs	r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 800299c:	2300      	movs	r3, #0
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ae:	492f      	ldr	r1, [pc, #188]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	492c      	ldr	r1, [pc, #176]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	4928      	ldr	r1, [pc, #160]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4922      	ldr	r1, [pc, #136]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	491e      	ldr	r1, [pc, #120]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4918      	ldr	r1, [pc, #96]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4914      	ldr	r1, [pc, #80]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d021      	beq.n	8002a84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e021      	b.n	8002a92 <HAL_GPIO_Init+0x2e2>
 8002a4e:	bf00      	nop
 8002a50:	10320000 	.word	0x10320000
 8002a54:	10310000 	.word	0x10310000
 8002a58:	10220000 	.word	0x10220000
 8002a5c:	10210000 	.word	0x10210000
 8002a60:	10120000 	.word	0x10120000
 8002a64:	10110000 	.word	0x10110000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40010c00 	.word	0x40010c00
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f47f ae8e 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	372c      	adds	r7, #44	; 0x2c
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	e001      	b.n	8002ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	807b      	strh	r3, [r7, #2]
 8002af2:	4613      	mov	r3, r2
 8002af4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af6:	787b      	ldrb	r3, [r7, #1]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b02:	e003      	b.n	8002b0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	041a      	lsls	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	611a      	str	r2, [r3, #16]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b28:	887a      	ldrh	r2, [r7, #2]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	041a      	lsls	r2, r3, #16
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	400b      	ands	r3, r1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd ff02 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e272      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba4:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e24c      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x76>
 8002be0:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x98>
 8002bf6:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a77      	ldr	r2, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xbc>
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c34:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fd fffc 	bl	8000c50 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd fff8 	bl	8000c50 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e200      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe4>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fd ffe8 	bl	8000c50 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fd ffe4 	bl	8000c50 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1ec      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x10c>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d063      	beq.n	8002d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c0      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4939      	ldr	r1, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fd ff9d 	bl	8000c50 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fd ff99 	bl	8000c50 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1a1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4927      	ldr	r1, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd ff7c 	bl	8000c50 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fd ff78 	bl	8000c50 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e180      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7fd ff5c 	bl	8000c50 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fd ff58 	bl	8000c50 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e160      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f000 fac4 	bl	8003348 <RCC_Delay>
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fd ff42 	bl	8000c50 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fd ff3e 	bl	8000c50 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d908      	bls.n	8002df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e146      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	42420000 	.word	0x42420000
 8002dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e9      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a6 	beq.w	8002f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd feff 	bl	8000c50 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fd fefb 	bl	8000c50 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e103      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x312>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x334>
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a69      	ldr	r2, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x356>
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a60      	ldr	r2, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fd feaf 	bl	8000c50 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fd feab 	bl	8000c50 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0b1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x37e>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fd fe99 	bl	8000c50 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fe95 	bl	8000c50 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e09b      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d061      	beq.n	8003030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d146      	bne.n	8003002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fe69 	bl	8000c50 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fd fe65 	bl	8000c50 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e06d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4921      	ldr	r1, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a19      	ldr	r1, [r3, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	491b      	ldr	r1, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fd fe39 	bl	8000c50 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fd fe35 	bl	8000c50 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e03d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46a>
 8003000:	e035      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fd fe22 	bl	8000c50 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fd fe1e 	bl	8000c50 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e026      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x498>
 800302e:	e01e      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e019      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x500>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d0      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4965      	ldr	r1, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d040      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e073      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4936      	ldr	r1, [pc, #216]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fd fd70 	bl	8000c50 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fd fd6c 	bl	8000c50 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e053      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d210      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fcce 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
 8003244:	08003700 	.word	0x08003700
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b490      	push	{r4, r7}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003258:	1d3c      	adds	r4, r7, #4
 800325a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800325c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003260:	f240 2301 	movw	r3, #513	; 0x201
 8003264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb0>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b04      	cmp	r3, #4
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 800328a:	2b08      	cmp	r3, #8
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x46>
 800328e:	e02b      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003292:	623b      	str	r3, [r7, #32]
      break;
 8003294:	e02b      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3328      	adds	r3, #40	; 0x28
 80032a0:	443b      	add	r3, r7
 80032a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	0c5b      	lsrs	r3, r3, #17
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	3328      	adds	r3, #40	; 0x28
 80032be:	443b      	add	r3, r7
 80032c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ca:	fb03 f202 	mul.w	r2, r3, r2
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	e004      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	623b      	str	r3, [r7, #32]
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ea:	623b      	str	r3, [r7, #32]
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	6a3b      	ldr	r3, [r7, #32]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc90      	pop	{r4, r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	080036e0 	.word	0x080036e0
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200
 8003308:	003d0900 	.word	0x003d0900

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <HAL_RCC_GetHCLKFreq+0x10>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000000 	.word	0x20000000

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003324:	f7ff fff2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0adb      	lsrs	r3, r3, #11
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	08003710 	.word	0x08003710

08003348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <RCC_Delay+0x34>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <RCC_Delay+0x38>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0a5b      	lsrs	r3, r3, #9
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003364:	bf00      	nop
  }
  while (Delay --);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	60fa      	str	r2, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <RCC_Delay+0x1c>
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000000 	.word	0x20000000
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d07d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10d      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
 80033bc:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d118      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e4:	f7fd fc34 	bl	8000c50 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	e008      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd fc30 	bl	8000c50 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e06d      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d02e      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d027      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003432:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800343e:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fbff 	bl	8000c50 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fbfb 	bl	8000c50 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e036      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4917      	ldr	r1, [pc, #92]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	4313      	orrs	r3, r2
 8003488:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	490b      	ldr	r1, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4904      	ldr	r1, [pc, #16]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	42420440 	.word	0x42420440

080034f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b08d      	sub	sp, #52	; 0x34
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80034fa:	f107 040c 	add.w	r4, r7, #12
 80034fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003504:	f240 2301 	movw	r3, #513	; 0x201
 8003508:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b10      	cmp	r3, #16
 8003528:	f200 808e 	bhi.w	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d049      	beq.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d079      	beq.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003538:	e086      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800353a:	4b49      	ldr	r3, [pc, #292]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d07f      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	3330      	adds	r3, #48	; 0x30
 8003556:	443b      	add	r3, r7
 8003558:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800355c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003568:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c5b      	lsrs	r3, r3, #17
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	3330      	adds	r3, #48	; 0x30
 8003574:	443b      	add	r3, r7
 8003576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003586:	4a37      	ldr	r2, [pc, #220]	; (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	fbb2 f2f3 	udiv	r2, r2, r3
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	e004      	b.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	4a33      	ldr	r2, [pc, #204]	; (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ae:	d102      	bne.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035b4:	e04a      	b.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035c4:	e042      	b.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d108      	bne.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80035e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e8:	e01f      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f4:	d109      	bne.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003602:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003614:	d11c      	bne.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003622:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003628:	e012      	b.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800362c:	f7ff fe78 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	0b9b      	lsrs	r3, r3, #14
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003650:	bf00      	nop
    }
  }
  return (frequency);
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003654:	4618      	mov	r0, r3
 8003656:	3734      	adds	r7, #52	; 0x34
 8003658:	46bd      	mov	sp, r7
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	080036f0 	.word	0x080036f0
 8003660:	40021000 	.word	0x40021000
 8003664:	007a1200 	.word	0x007a1200
 8003668:	003d0900 	.word	0x003d0900
 800366c:	aaaaaaab 	.word	0xaaaaaaab

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	2600      	movs	r6, #0
 8003674:	4d0c      	ldr	r5, [pc, #48]	; (80036a8 <__libc_init_array+0x38>)
 8003676:	4c0d      	ldr	r4, [pc, #52]	; (80036ac <__libc_init_array+0x3c>)
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	f000 f822 	bl	80036c8 <_init>
 8003684:	2600      	movs	r6, #0
 8003686:	4d0a      	ldr	r5, [pc, #40]	; (80036b0 <__libc_init_array+0x40>)
 8003688:	4c0a      	ldr	r4, [pc, #40]	; (80036b4 <__libc_init_array+0x44>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	08003718 	.word	0x08003718
 80036ac:	08003718 	.word	0x08003718
 80036b0:	08003718 	.word	0x08003718
 80036b4:	0800371c 	.word	0x0800371c

080036b8 <memset>:
 80036b8:	4603      	mov	r3, r0
 80036ba:	4402      	add	r2, r0
 80036bc:	4293      	cmp	r3, r2
 80036be:	d100      	bne.n	80036c2 <memset+0xa>
 80036c0:	4770      	bx	lr
 80036c2:	f803 1b01 	strb.w	r1, [r3], #1
 80036c6:	e7f9      	b.n	80036bc <memset+0x4>

080036c8 <_init>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr

080036d4 <_fini>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr
